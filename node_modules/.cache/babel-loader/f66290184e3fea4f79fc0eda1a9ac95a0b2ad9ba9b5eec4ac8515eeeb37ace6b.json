{"ast":null,"code":"var _jsxFileName = \"/Users/ripple/Desktop/webdev4/client/src/components/containers/NewStudentContainer.js\";\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      if (this.state.gpa < 0 || this.state.gpa > 4.0) {\n        alert(\"GPA is required to adhere to a 4.0 scale! Please reenter.\");\n        return;\n      }\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        email: this.state.email,\n        image_url: this.state.image_url,\n        gpa: this.state.gpa\n      };\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n      // if (!newStudent || !newStudent.campusId) {\n      //   this.setState({\n      //     firstname: \"\", \n      //     lastname: \"\", \n      //     campusId: null, \n      //     redirect: true, \n      //     redirectId: null\n      //   });\n      //   return;\n      // }\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        email: \"\",\n        image_url: \"\",\n        gpa: 0.0,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      email: \"\",\n      image_url: \"\",\n      gpa: 0.0,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","gpa","alert","student","firstname","lastname","campusId","email","image_url","newStudent","addStudent","redirect","redirectId","id","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapDispatch","dispatch"],"sources":["/Users/ripple/Desktop/webdev4/client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      email: \"\",\n      image_url: \"\",\n      gpa: 0.0,\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.state.gpa < 0 || this.state.gpa > 4.0) {\n      alert(\"GPA is required to adhere to a 4.0 scale! Please reenter.\");\n      return;\n    }\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        email: this.state.email,\n        image_url: this.state.image_url,\n        gpa: this.state.gpa\n    };\n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n    // if (!newStudent || !newStudent.campusId) {\n    //   this.setState({\n    //     firstname: \"\", \n    //     lastname: \"\", \n    //     campusId: null, \n    //     redirect: true, \n    //     redirectId: null\n    //   });\n    //   return;\n    // }\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      email: \"\",\n      image_url: \"\",\n      gpa: 0.0,\n      redirect: true, \n      redirectId: newStudent.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}