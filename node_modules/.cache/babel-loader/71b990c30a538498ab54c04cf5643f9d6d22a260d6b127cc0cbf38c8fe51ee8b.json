{"ast":null,"code":"var _jsxFileName = \"/Users/ripple/Desktop/webdev4/client/src/components/views/EditStudentView.js\",\n  _s = $RefreshSig$();\nimport \"../../App.css\";\nimport { editStudentThunk } from \"../../store/thunks\";\nimport { connect } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { Redirect } from \"react-router-dom\";\n\n/*\n\nstudent: Object\n    campus: Object\n        address: \"65-30 Kissena Blvd, Queens, NY 11367\"\n        createdAt: \"2025-04-27T02:58:09.643Z\"\n        description: \"This is a school in Queens, New York.\"\n        id: 2\n        name: \"Queens College\"\n        campusId: 2\n    firstname: \"Mary\"\n    id: 2\n    lastname: \"Johnson\"\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditStudentView = props => {\n  _s();\n  const {\n    student\n  } = props;\n  console.log(\"Student props)\", props);\n\n  // Initialize state with empty strings to prevent uncontrolled input warning\n  const [firstname, setFirstName] = useState(\"\");\n  const [lastname, setLastName] = useState(\"\");\n  const [studentID, setStudentID] = useState(\"\");\n  const [campusID, setCampusID] = useState(\"\");\n  let [edited, Edit] = useState(false);\n\n  // If student data is available, update state\n  useEffect(() => {\n    if (student) {\n      setFirstName(student.firstname || \"\");\n      setLastName(student.lastname || \"\");\n      setStudentID(student.id);\n      setCampusID(student.campusId);\n    }\n  }, [student]); // Only run when student changes\n\n  // If student data hasn't been loaded, show loading message\n  if (!student) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading student data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let id = studentID,\n      campusId = campusID;\n    // console.log(\"Information\", { name, imageURL, address, description });\n    console.log(await props.editstudent({\n      id,\n      firstname,\n      lastname,\n      campusId\n    }));\n    Edit(true);\n  };\n  if (edited) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/student/${student.id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editstudentview\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"editstudentviewtitle\",\n      children: student.firstname + \" \" + student.lastname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"editstudentviewbody\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"editstudentviewform\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"First Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: firstname,\n            onChange: e => setFirstName(e.target.value),\n            placeholder: \"College Name...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Last Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: lastname,\n            onChange: e => setLastName(e.target.value),\n            placeholder: \"Image Link...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Campus ID: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: campusID,\n            onChange: e => setCampusID(e.target.value),\n            placeholder: \"Campus ID...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"editstudentsubmit\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(EditStudentView, \"d5Iq8jDzhBnEw70FMVLZZ8WIDQg=\");\n_c = EditStudentView;\nconst mapDispatch = dispatch => {\n  return {\n    editstudent: student => dispatch(editStudentThunk(student))\n  };\n};\nexport default connect(null, mapDispatch)(EditStudentView);\nvar _c;\n$RefreshReg$(_c, \"EditStudentView\");","map":{"version":3,"names":["editStudentThunk","connect","useState","useEffect","Redirect","jsxDEV","_jsxDEV","EditStudentView","props","_s","student","console","log","firstname","setFirstName","lastname","setLastName","studentID","setStudentID","campusID","setCampusID","edited","Edit","id","campusId","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","e","preventDefault","editstudent","to","onSubmit","type","value","onChange","target","placeholder","_c","mapDispatch","dispatch","$RefreshReg$"],"sources":["/Users/ripple/Desktop/webdev4/client/src/components/views/EditStudentView.js"],"sourcesContent":["import \"../../App.css\";\nimport { editStudentThunk } from \"../../store/thunks\";\nimport { connect } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { Redirect } from \"react-router-dom\";\n\n\n/*\n\nstudent: Object\n    campus: Object\n        address: \"65-30 Kissena Blvd, Queens, NY 11367\"\n        createdAt: \"2025-04-27T02:58:09.643Z\"\n        description: \"This is a school in Queens, New York.\"\n        id: 2\n        name: \"Queens College\"\n        campusId: 2\n    firstname: \"Mary\"\n    id: 2\n    lastname: \"Johnson\"\n*/\nconst EditStudentView = (props) => {\n    const { student } = props;\n    console.log(\"Student props)\", props);\n\n    // Initialize state with empty strings to prevent uncontrolled input warning\n    const [firstname, setFirstName] = useState(\"\");\n    const [lastname, setLastName] = useState(\"\");\n    const [studentID, setStudentID] = useState(\"\");\n    const [campusID, setCampusID] = useState(\"\");\n     \n    let [edited, Edit] = useState(false);\n\n    // If student data is available, update state\n    useEffect(() => {\n        if (student) {\n            setFirstName(student.firstname || \"\");\n            setLastName(student.lastname || \"\");\n            setStudentID(student.id);\n            setCampusID(student.campusId);\n        }\n    }, [student]); // Only run when student changes\n\n    // If student data hasn't been loaded, show loading message\n    if (!student) {\n        return <div>Loading student data...</div>;\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        let id = studentID, campusId = campusID;\n        // console.log(\"Information\", { name, imageURL, address, description });\n        console.log(await props.editstudent({ id, firstname, lastname, campusId }));\n        Edit(true);\n    };\n    if (edited) {\n        return <Redirect to = {`/student/${student.id}`} />;\n    }\n    return (\n        <div id=\"editstudentview\">\n            <h2 id=\"editstudentviewtitle\">{student.firstname + \" \" + student.lastname}</h2>\n            <div id=\"editstudentviewbody\">\n                <form id=\"editstudentviewform\" onSubmit={handleSubmit}>\n                    <div>\n                        <label>First Name: </label>\n                        <input\n                            type=\"text\"\n                            value={firstname}\n                            onChange={(e) => setFirstName(e.target.value)}\n                            placeholder=\"College Name...\"\n                        />\n                    </div>\n                    <div>\n                        <label>Last Name: </label>\n                        <input\n                            type=\"text\"\n                            value={lastname}\n                            onChange={(e) => setLastName(e.target.value)}\n                            placeholder=\"Image Link...\"\n                        />\n                    </div>\n                    <div>\n                        <label>Campus ID: </label>\n                        <input\n                            type=\"number\"\n                            value={campusID}\n                            onChange={(e) => setCampusID(e.target.value)}\n                            placeholder=\"Campus ID...\"\n                        />\n                    </div>\n                        <button id=\"editstudentsubmit\" type=\"submit\">\n                            Submit\n                        </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nconst mapDispatch = (dispatch) => {\n    return {\n        editstudent: (student) => dispatch(editStudentThunk(student)),\n    };\n};\n\nexport default connect(null, mapDispatch)(EditStudentView);\n"],"mappings":";;AAAA,OAAO,eAAe;AACtB,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;;AAG3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,MAAA,IAAAC,OAAA;AAcA,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAQ,CAAC,GAAGF,KAAK;EACzBG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,KAAK,CAAC;;EAEpC;EACA,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAE5C,IAAI,CAACmB,MAAM,EAAEC,IAAI,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACZ,IAAIO,OAAO,EAAE;MACTI,YAAY,CAACJ,OAAO,CAACG,SAAS,IAAI,EAAE,CAAC;MACrCG,WAAW,CAACN,OAAO,CAACK,QAAQ,IAAI,EAAE,CAAC;MACnCG,YAAY,CAACR,OAAO,CAACa,EAAE,CAAC;MACxBH,WAAW,CAACV,OAAO,CAACc,QAAQ,CAAC;IACjC;EACJ,CAAC,EAAE,CAACd,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf;EACA,IAAI,CAACA,OAAO,EAAE;IACV,oBAAOJ,OAAA;MAAAmB,QAAA,EAAK;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC7C;EAEA,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIT,EAAE,GAAGN,SAAS;MAAEO,QAAQ,GAAGL,QAAQ;IACvC;IACAR,OAAO,CAACC,GAAG,CAAC,MAAMJ,KAAK,CAACyB,WAAW,CAAC;MAAEV,EAAE;MAAEV,SAAS;MAAEE,QAAQ;MAAES;IAAS,CAAC,CAAC,CAAC;IAC3EF,IAAI,CAAC,IAAI,CAAC;EACd,CAAC;EACD,IAAID,MAAM,EAAE;IACR,oBAAOf,OAAA,CAACF,QAAQ;MAAC8B,EAAE,EAAI,YAAYxB,OAAO,CAACa,EAAE;IAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvD;EACA,oBACIvB,OAAA;IAAKiB,EAAE,EAAC,iBAAiB;IAAAE,QAAA,gBACrBnB,OAAA;MAAIiB,EAAE,EAAC,sBAAsB;MAAAE,QAAA,EAAEf,OAAO,CAACG,SAAS,GAAG,GAAG,GAAGH,OAAO,CAACK;IAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/EvB,OAAA;MAAKiB,EAAE,EAAC,qBAAqB;MAAAE,QAAA,eACzBnB,OAAA;QAAMiB,EAAE,EAAC,qBAAqB;QAACY,QAAQ,EAAEL,YAAa;QAAAL,QAAA,gBAClDnB,OAAA;UAAAmB,QAAA,gBACInB,OAAA;YAAAmB,QAAA,EAAO;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3BvB,OAAA;YACI8B,IAAI,EAAC,MAAM;YACXC,KAAK,EAAExB,SAAU;YACjByB,QAAQ,EAAGP,CAAC,IAAKjB,YAAY,CAACiB,CAAC,CAACQ,MAAM,CAACF,KAAK,CAAE;YAC9CG,WAAW,EAAC;UAAiB;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNvB,OAAA;UAAAmB,QAAA,gBACInB,OAAA;YAAAmB,QAAA,EAAO;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1BvB,OAAA;YACI8B,IAAI,EAAC,MAAM;YACXC,KAAK,EAAEtB,QAAS;YAChBuB,QAAQ,EAAGP,CAAC,IAAKf,WAAW,CAACe,CAAC,CAACQ,MAAM,CAACF,KAAK,CAAE;YAC7CG,WAAW,EAAC;UAAe;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNvB,OAAA;UAAAmB,QAAA,gBACInB,OAAA;YAAAmB,QAAA,EAAO;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1BvB,OAAA;YACI8B,IAAI,EAAC,QAAQ;YACbC,KAAK,EAAElB,QAAS;YAChBmB,QAAQ,EAAGP,CAAC,IAAKX,WAAW,CAACW,CAAC,CAACQ,MAAM,CAACF,KAAK,CAAE;YAC7CG,WAAW,EAAC;UAAc;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACFvB,OAAA;UAAQiB,EAAE,EAAC,mBAAmB;UAACa,IAAI,EAAC,QAAQ;UAAAX,QAAA,EAAC;QAE7C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACpB,EAAA,CA5EIF,eAAe;AAAAkC,EAAA,GAAflC,eAAe;AA8ErB,MAAMmC,WAAW,GAAIC,QAAQ,IAAK;EAC9B,OAAO;IACHV,WAAW,EAAGvB,OAAO,IAAKiC,QAAQ,CAAC3C,gBAAgB,CAACU,OAAO,CAAC;EAChE,CAAC;AACL,CAAC;AAED,eAAeT,OAAO,CAAC,IAAI,EAAEyC,WAAW,CAAC,CAACnC,eAAe,CAAC;AAAC,IAAAkC,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}