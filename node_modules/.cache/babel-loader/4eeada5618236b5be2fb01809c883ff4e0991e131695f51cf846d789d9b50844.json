{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nimport axios from 'axios';\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    console.log(\"-----------\");\n    let res = await axios.get(`/api/campuses`);\n    console.log(res.data);\n    // // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);\n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/campuses`, campus);\n    // Call Action Creator to return Action object (type + payload with new campuses data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const editCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    console.log(\"Campus in thunks: \", campus);\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus);\n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);\n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","fetchAllCampusesThunk","dispatch","console","log","res","get","data","fetchAllCampuses","err","error","fetchCampusThunk","id","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","post","addStudent","addCampusThunk","campus","addCampus","deleteStudentThunk","studentId","delete","deleteStudent","editStudentThunk","updatedStudent","put","editStudent","editCampusThunk","updatedCampus","editCampus","fetchStudentThunk","fetchStudent"],"sources":["/Users/ripple/Desktop/webdev4/client/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nimport axios from 'axios';\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    console.log(\"-----------\");\n    let res = await axios.get(`/api/campuses`);\n\n    console.log(res.data);  \n    // // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/campuses`, campus);  \n    // Call Action Creator to return Action object (type + payload with new campuses data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\nexport const editCampusThunk = campus => async dispatch => {  // The THUNK\n  try {\n    console.log(\"Campus in thunks: \", campus);\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus); \n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,EAAE,MAAM,0BAA0B,CAAC,CAAE;AACjD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAAG;EAChE,IAAI;IACF;IACAC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,IAAIC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,eAAe,CAAC;IAE1CH,OAAO,CAACC,GAAG,CAACC,GAAG,CAACE,IAAI,CAAC;IACrB;IACA;IACAL,QAAQ,CAACH,EAAE,CAACS,gBAAgB,CAACH,GAAG,CAACE,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAME,gBAAgB,GAAIC,EAAE,IAAK,MAAOV,QAAQ,IAAK;EAAG;EAC7D,IAAI;IACF;IACA,IAAIG,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,iBAAiBM,EAAE,EAAE,CAAC;IAChDV,QAAQ,CAACH,EAAE,CAACc,WAAW,CAACR,GAAG,CAACE,IAAI,CAAC,CAAC;EACpC,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMK,qBAAqB,GAAGA,CAAA,KAAM,MAAOZ,QAAQ,IAAK;EAAG;EAChE,IAAI;IACF;IACA,IAAIG,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,eAAe,CAAC;IAC1C;IACA;IACAJ,QAAQ,CAACH,EAAE,CAACgB,gBAAgB,CAACV,GAAG,CAACE,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMO,eAAe,GAAIC,OAAO,IAAK,MAAOf,QAAQ,IAAK;EAAG;EACjE,IAAI;IACF;IACA,IAAIG,GAAG,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,eAAe,EAAED,OAAO,CAAC;IACpD;IACA;IACAf,QAAQ,CAACH,EAAE,CAACoB,UAAU,CAACd,GAAG,CAACE,IAAI,CAAC,CAAC;IACjC,OAAOF,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;AACD,OAAO,MAAMW,cAAc,GAAIC,MAAM,IAAK,MAAOnB,QAAQ,IAAK;EAAG;EAC/D,IAAI;IACF;IACA,IAAIG,GAAG,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,eAAe,EAAEG,MAAM,CAAC;IACnD;IACA;IACAnB,QAAQ,CAACH,EAAE,CAACuB,SAAS,CAACjB,GAAG,CAACE,IAAI,CAAC,CAAC;IAChC,OAAOF,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMc,kBAAkB,GAAGC,SAAS,IAAI,MAAMtB,QAAQ,IAAI;EAAG;EAClE,IAAI;IACF;IACA,MAAMF,KAAK,CAACyB,MAAM,CAAC,iBAAiBD,SAAS,EAAE,CAAC;IAChD;IACAtB,QAAQ,CAACH,EAAE,CAAC2B,aAAa,CAACF,SAAS,CAAC,CAAC;EACvC,CAAC,CAAC,OAAMf,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMkB,gBAAgB,GAAGV,OAAO,IAAI,MAAMf,QAAQ,IAAI;EAAG;EAC9D,IAAI;IACF;IACA,IAAI0B,cAAc,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,iBAAiBZ,OAAO,CAACL,EAAE,EAAE,EAAEK,OAAO,CAAC;IAC5E;IACAf,QAAQ,CAACH,EAAE,CAAC+B,WAAW,CAACF,cAAc,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAMnB,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;AACD,OAAO,MAAMsB,eAAe,GAAGV,MAAM,IAAI,MAAMnB,QAAQ,IAAI;EAAG;EAC5D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiB,MAAM,CAAC;IACzC;IACA,IAAIW,aAAa,GAAG,MAAMhC,KAAK,CAAC6B,GAAG,CAAC,iBAAiBR,MAAM,CAACT,EAAE,EAAE,EAAES,MAAM,CAAC;IACzE;IACAnB,QAAQ,CAACH,EAAE,CAACkC,UAAU,CAACD,aAAa,CAAC,CAAC;EACxC,CAAC,CAAC,OAAMvB,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMyB,iBAAiB,GAAGtB,EAAE,IAAI,MAAMV,QAAQ,IAAI;EAAG;EAC1D,IAAI;IACF;IACA,IAAIG,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,iBAAiBM,EAAE,EAAE,CAAC;IAChD;IACA;IACAV,QAAQ,CAACH,EAAE,CAACoC,YAAY,CAAC9B,GAAG,CAACE,IAAI,CAAC,CAAC;EACrC,CAAC,CAAC,OAAME,GAAG,EAAE;IACXN,OAAO,CAACO,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}